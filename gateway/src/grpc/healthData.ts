// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: healthData.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "";

export enum ActivityStatus {
  Walking = 0,
  Cycling = 1,
  Running = 2,
  Resting = 3,
  UNRECOGNIZED = -1,
}

export function activityStatusFromJSON(object: any): ActivityStatus {
  switch (object) {
    case 0:
    case "Walking":
      return ActivityStatus.Walking;
    case 1:
    case "Cycling":
      return ActivityStatus.Cycling;
    case 2:
    case "Running":
      return ActivityStatus.Running;
    case 3:
    case "Resting":
      return ActivityStatus.Resting;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActivityStatus.UNRECOGNIZED;
  }
}

export function activityStatusToJSON(object: ActivityStatus): string {
  switch (object) {
    case ActivityStatus.Walking:
      return "Walking";
    case ActivityStatus.Cycling:
      return "Cycling";
    case ActivityStatus.Running:
      return "Running";
    case ActivityStatus.Resting:
      return "Resting";
    case ActivityStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HealthRecordRequest {
  athleteId: string;
  timestamp: Date | undefined;
  heartRate: number;
  bodyTemperature: number;
  bloodPressure: string;
  bloodOxygen: number;
  stepCount: number;
  activityStatus: ActivityStatus;
  latitude: number;
  longitude: number;
  secureTransmissionStatus: number;
}

export interface HealthRecordResponse {
  records: HealthRecord[];
}

export interface HealthRecord {
  recordId: number;
  athleteId: string;
  timestamp: Date | undefined;
  heartRate: number;
  bodyTemperature: number;
  bloodPressure: string;
  bloodOxygen: number;
  stepCount: number;
  activityStatus: ActivityStatus;
  latitude: number;
  longitude: number;
  secureTransmissionStatus: number;
}

export interface HealthRecordIdRequest {
  recordId: number;
}

export interface Message {
  recordId: number;
  message: string;
}

export interface AthleteFilter {
  athleteId: string;
  activityStatus: ActivityStatus;
  startTime: Date | undefined;
  endTime: Date | undefined;
}

function createBaseHealthRecordRequest(): HealthRecordRequest {
  return {
    athleteId: "",
    timestamp: undefined,
    heartRate: 0,
    bodyTemperature: 0,
    bloodPressure: "",
    bloodOxygen: 0,
    stepCount: 0,
    activityStatus: 0,
    latitude: 0,
    longitude: 0,
    secureTransmissionStatus: 0,
  };
}

export const HealthRecordRequest: MessageFns<HealthRecordRequest> = {
  encode(message: HealthRecordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.athleteId !== "") {
      writer.uint32(10).string(message.athleteId);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
    }
    if (message.heartRate !== 0) {
      writer.uint32(24).int32(message.heartRate);
    }
    if (message.bodyTemperature !== 0) {
      writer.uint32(37).float(message.bodyTemperature);
    }
    if (message.bloodPressure !== "") {
      writer.uint32(42).string(message.bloodPressure);
    }
    if (message.bloodOxygen !== 0) {
      writer.uint32(48).int32(message.bloodOxygen);
    }
    if (message.stepCount !== 0) {
      writer.uint32(56).int32(message.stepCount);
    }
    if (message.activityStatus !== 0) {
      writer.uint32(64).int32(message.activityStatus);
    }
    if (message.latitude !== 0) {
      writer.uint32(73).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(81).double(message.longitude);
    }
    if (message.secureTransmissionStatus !== 0) {
      writer.uint32(88).int32(message.secureTransmissionStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthRecordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.athleteId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.heartRate = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.bodyTemperature = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bloodPressure = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bloodOxygen = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.stepCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.activityStatus = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.secureTransmissionStatus = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthRecordRequest {
    return {
      athleteId: isSet(object.athleteId) ? globalThis.String(object.athleteId) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      heartRate: isSet(object.heartRate) ? globalThis.Number(object.heartRate) : 0,
      bodyTemperature: isSet(object.bodyTemperature) ? globalThis.Number(object.bodyTemperature) : 0,
      bloodPressure: isSet(object.bloodPressure) ? globalThis.String(object.bloodPressure) : "",
      bloodOxygen: isSet(object.bloodOxygen) ? globalThis.Number(object.bloodOxygen) : 0,
      stepCount: isSet(object.stepCount) ? globalThis.Number(object.stepCount) : 0,
      activityStatus: isSet(object.activityStatus) ? activityStatusFromJSON(object.activityStatus) : 0,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      secureTransmissionStatus: isSet(object.secureTransmissionStatus)
        ? globalThis.Number(object.secureTransmissionStatus)
        : 0,
    };
  },

  toJSON(message: HealthRecordRequest): unknown {
    const obj: any = {};
    if (message.athleteId !== "") {
      obj.athleteId = message.athleteId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.heartRate !== 0) {
      obj.heartRate = Math.round(message.heartRate);
    }
    if (message.bodyTemperature !== 0) {
      obj.bodyTemperature = message.bodyTemperature;
    }
    if (message.bloodPressure !== "") {
      obj.bloodPressure = message.bloodPressure;
    }
    if (message.bloodOxygen !== 0) {
      obj.bloodOxygen = Math.round(message.bloodOxygen);
    }
    if (message.stepCount !== 0) {
      obj.stepCount = Math.round(message.stepCount);
    }
    if (message.activityStatus !== 0) {
      obj.activityStatus = activityStatusToJSON(message.activityStatus);
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.secureTransmissionStatus !== 0) {
      obj.secureTransmissionStatus = Math.round(message.secureTransmissionStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthRecordRequest>, I>>(base?: I): HealthRecordRequest {
    return HealthRecordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthRecordRequest>, I>>(object: I): HealthRecordRequest {
    const message = createBaseHealthRecordRequest();
    message.athleteId = object.athleteId ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.heartRate = object.heartRate ?? 0;
    message.bodyTemperature = object.bodyTemperature ?? 0;
    message.bloodPressure = object.bloodPressure ?? "";
    message.bloodOxygen = object.bloodOxygen ?? 0;
    message.stepCount = object.stepCount ?? 0;
    message.activityStatus = object.activityStatus ?? 0;
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.secureTransmissionStatus = object.secureTransmissionStatus ?? 0;
    return message;
  },
};

function createBaseHealthRecordResponse(): HealthRecordResponse {
  return { records: [] };
}

export const HealthRecordResponse: MessageFns<HealthRecordResponse> = {
  encode(message: HealthRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.records) {
      HealthRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.records.push(HealthRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthRecordResponse {
    return {
      records: globalThis.Array.isArray(object?.records)
        ? object.records.map((e: any) => HealthRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: HealthRecordResponse): unknown {
    const obj: any = {};
    if (message.records?.length) {
      obj.records = message.records.map((e) => HealthRecord.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthRecordResponse>, I>>(base?: I): HealthRecordResponse {
    return HealthRecordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthRecordResponse>, I>>(object: I): HealthRecordResponse {
    const message = createBaseHealthRecordResponse();
    message.records = object.records?.map((e) => HealthRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHealthRecord(): HealthRecord {
  return {
    recordId: 0,
    athleteId: "",
    timestamp: undefined,
    heartRate: 0,
    bodyTemperature: 0,
    bloodPressure: "",
    bloodOxygen: 0,
    stepCount: 0,
    activityStatus: 0,
    latitude: 0,
    longitude: 0,
    secureTransmissionStatus: 0,
  };
}

export const HealthRecord: MessageFns<HealthRecord> = {
  encode(message: HealthRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordId !== 0) {
      writer.uint32(8).int32(message.recordId);
    }
    if (message.athleteId !== "") {
      writer.uint32(18).string(message.athleteId);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.heartRate !== 0) {
      writer.uint32(32).int32(message.heartRate);
    }
    if (message.bodyTemperature !== 0) {
      writer.uint32(45).float(message.bodyTemperature);
    }
    if (message.bloodPressure !== "") {
      writer.uint32(50).string(message.bloodPressure);
    }
    if (message.bloodOxygen !== 0) {
      writer.uint32(56).int32(message.bloodOxygen);
    }
    if (message.stepCount !== 0) {
      writer.uint32(64).int32(message.stepCount);
    }
    if (message.activityStatus !== 0) {
      writer.uint32(72).int32(message.activityStatus);
    }
    if (message.latitude !== 0) {
      writer.uint32(81).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(89).double(message.longitude);
    }
    if (message.secureTransmissionStatus !== 0) {
      writer.uint32(96).int32(message.secureTransmissionStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.recordId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.athleteId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.heartRate = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.bodyTemperature = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.bloodPressure = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bloodOxygen = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.stepCount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.activityStatus = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 89) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.secureTransmissionStatus = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthRecord {
    return {
      recordId: isSet(object.recordId) ? globalThis.Number(object.recordId) : 0,
      athleteId: isSet(object.athleteId) ? globalThis.String(object.athleteId) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      heartRate: isSet(object.heartRate) ? globalThis.Number(object.heartRate) : 0,
      bodyTemperature: isSet(object.bodyTemperature) ? globalThis.Number(object.bodyTemperature) : 0,
      bloodPressure: isSet(object.bloodPressure) ? globalThis.String(object.bloodPressure) : "",
      bloodOxygen: isSet(object.bloodOxygen) ? globalThis.Number(object.bloodOxygen) : 0,
      stepCount: isSet(object.stepCount) ? globalThis.Number(object.stepCount) : 0,
      activityStatus: isSet(object.activityStatus) ? activityStatusFromJSON(object.activityStatus) : 0,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      secureTransmissionStatus: isSet(object.secureTransmissionStatus)
        ? globalThis.Number(object.secureTransmissionStatus)
        : 0,
    };
  },

  toJSON(message: HealthRecord): unknown {
    const obj: any = {};
    if (message.recordId !== 0) {
      obj.recordId = Math.round(message.recordId);
    }
    if (message.athleteId !== "") {
      obj.athleteId = message.athleteId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.heartRate !== 0) {
      obj.heartRate = Math.round(message.heartRate);
    }
    if (message.bodyTemperature !== 0) {
      obj.bodyTemperature = message.bodyTemperature;
    }
    if (message.bloodPressure !== "") {
      obj.bloodPressure = message.bloodPressure;
    }
    if (message.bloodOxygen !== 0) {
      obj.bloodOxygen = Math.round(message.bloodOxygen);
    }
    if (message.stepCount !== 0) {
      obj.stepCount = Math.round(message.stepCount);
    }
    if (message.activityStatus !== 0) {
      obj.activityStatus = activityStatusToJSON(message.activityStatus);
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.secureTransmissionStatus !== 0) {
      obj.secureTransmissionStatus = Math.round(message.secureTransmissionStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthRecord>, I>>(base?: I): HealthRecord {
    return HealthRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthRecord>, I>>(object: I): HealthRecord {
    const message = createBaseHealthRecord();
    message.recordId = object.recordId ?? 0;
    message.athleteId = object.athleteId ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.heartRate = object.heartRate ?? 0;
    message.bodyTemperature = object.bodyTemperature ?? 0;
    message.bloodPressure = object.bloodPressure ?? "";
    message.bloodOxygen = object.bloodOxygen ?? 0;
    message.stepCount = object.stepCount ?? 0;
    message.activityStatus = object.activityStatus ?? 0;
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.secureTransmissionStatus = object.secureTransmissionStatus ?? 0;
    return message;
  },
};

function createBaseHealthRecordIdRequest(): HealthRecordIdRequest {
  return { recordId: 0 };
}

export const HealthRecordIdRequest: MessageFns<HealthRecordIdRequest> = {
  encode(message: HealthRecordIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordId !== 0) {
      writer.uint32(8).int32(message.recordId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthRecordIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthRecordIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.recordId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthRecordIdRequest {
    return { recordId: isSet(object.recordId) ? globalThis.Number(object.recordId) : 0 };
  },

  toJSON(message: HealthRecordIdRequest): unknown {
    const obj: any = {};
    if (message.recordId !== 0) {
      obj.recordId = Math.round(message.recordId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthRecordIdRequest>, I>>(base?: I): HealthRecordIdRequest {
    return HealthRecordIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthRecordIdRequest>, I>>(object: I): HealthRecordIdRequest {
    const message = createBaseHealthRecordIdRequest();
    message.recordId = object.recordId ?? 0;
    return message;
  },
};

function createBaseMessage(): Message {
  return { recordId: 0, message: "" };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordId !== 0) {
      writer.uint32(8).int32(message.recordId);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.recordId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      recordId: isSet(object.recordId) ? globalThis.Number(object.recordId) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.recordId !== 0) {
      obj.recordId = Math.round(message.recordId);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.recordId = object.recordId ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseAthleteFilter(): AthleteFilter {
  return { athleteId: "", activityStatus: 0, startTime: undefined, endTime: undefined };
}

export const AthleteFilter: MessageFns<AthleteFilter> = {
  encode(message: AthleteFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.athleteId !== "") {
      writer.uint32(10).string(message.athleteId);
    }
    if (message.activityStatus !== 0) {
      writer.uint32(16).int32(message.activityStatus);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AthleteFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAthleteFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.athleteId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.activityStatus = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AthleteFilter {
    return {
      athleteId: isSet(object.athleteId) ? globalThis.String(object.athleteId) : "",
      activityStatus: isSet(object.activityStatus) ? activityStatusFromJSON(object.activityStatus) : 0,
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
    };
  },

  toJSON(message: AthleteFilter): unknown {
    const obj: any = {};
    if (message.athleteId !== "") {
      obj.athleteId = message.athleteId;
    }
    if (message.activityStatus !== 0) {
      obj.activityStatus = activityStatusToJSON(message.activityStatus);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AthleteFilter>, I>>(base?: I): AthleteFilter {
    return AthleteFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AthleteFilter>, I>>(object: I): AthleteFilter {
    const message = createBaseAthleteFilter();
    message.athleteId = object.athleteId ?? "";
    message.activityStatus = object.activityStatus ?? 0;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

export type HealthDataService = typeof HealthDataService;
export const HealthDataService = {
  createHealthRecord: {
    path: "/HealthData/CreateHealthRecord",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HealthRecordRequest): Buffer => Buffer.from(HealthRecordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): HealthRecordRequest => HealthRecordRequest.decode(value),
    responseSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer): Empty => Empty.decode(value),
  },
  getHealthRecord: {
    path: "/HealthData/GetHealthRecord",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HealthRecordIdRequest): Buffer =>
      Buffer.from(HealthRecordIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): HealthRecordIdRequest => HealthRecordIdRequest.decode(value),
    responseSerialize: (value: HealthRecord): Buffer => Buffer.from(HealthRecord.encode(value).finish()),
    responseDeserialize: (value: Buffer): HealthRecord => HealthRecord.decode(value),
  },
  getAllHealthRecords: {
    path: "/HealthData/GetAllHealthRecords",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: HealthRecordResponse): Buffer =>
      Buffer.from(HealthRecordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): HealthRecordResponse => HealthRecordResponse.decode(value),
  },
  updateHealthRecord: {
    path: "/HealthData/UpdateHealthRecord",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HealthRecord): Buffer => Buffer.from(HealthRecord.encode(value).finish()),
    requestDeserialize: (value: Buffer): HealthRecord => HealthRecord.decode(value),
    responseSerialize: (value: Message): Buffer => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value: Buffer): Message => Message.decode(value),
  },
  deleteHealthRecord: {
    path: "/HealthData/DeleteHealthRecord",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: HealthRecordIdRequest): Buffer =>
      Buffer.from(HealthRecordIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): HealthRecordIdRequest => HealthRecordIdRequest.decode(value),
    responseSerialize: (value: Message): Buffer => Buffer.from(Message.encode(value).finish()),
    responseDeserialize: (value: Buffer): Message => Message.decode(value),
  },
  getAthleteHealthRecords: {
    path: "/HealthData/GetAthleteHealthRecords",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AthleteFilter): Buffer => Buffer.from(AthleteFilter.encode(value).finish()),
    requestDeserialize: (value: Buffer): AthleteFilter => AthleteFilter.decode(value),
    responseSerialize: (value: HealthRecordResponse): Buffer =>
      Buffer.from(HealthRecordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): HealthRecordResponse => HealthRecordResponse.decode(value),
  },
} as const;

export interface HealthDataServer extends UntypedServiceImplementation {
  createHealthRecord: handleUnaryCall<HealthRecordRequest, Empty>;
  getHealthRecord: handleUnaryCall<HealthRecordIdRequest, HealthRecord>;
  getAllHealthRecords: handleUnaryCall<Empty, HealthRecordResponse>;
  updateHealthRecord: handleUnaryCall<HealthRecord, Message>;
  deleteHealthRecord: handleUnaryCall<HealthRecordIdRequest, Message>;
  getAthleteHealthRecords: handleUnaryCall<AthleteFilter, HealthRecordResponse>;
}

export interface HealthDataClient extends Client {
  createHealthRecord(
    request: HealthRecordRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createHealthRecord(
    request: HealthRecordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createHealthRecord(
    request: HealthRecordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  getHealthRecord(
    request: HealthRecordIdRequest,
    callback: (error: ServiceError | null, response: HealthRecord) => void,
  ): ClientUnaryCall;
  getHealthRecord(
    request: HealthRecordIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HealthRecord) => void,
  ): ClientUnaryCall;
  getHealthRecord(
    request: HealthRecordIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HealthRecord) => void,
  ): ClientUnaryCall;
  getAllHealthRecords(
    request: Empty,
    callback: (error: ServiceError | null, response: HealthRecordResponse) => void,
  ): ClientUnaryCall;
  getAllHealthRecords(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HealthRecordResponse) => void,
  ): ClientUnaryCall;
  getAllHealthRecords(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HealthRecordResponse) => void,
  ): ClientUnaryCall;
  updateHealthRecord(
    request: HealthRecord,
    callback: (error: ServiceError | null, response: Message) => void,
  ): ClientUnaryCall;
  updateHealthRecord(
    request: HealthRecord,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Message) => void,
  ): ClientUnaryCall;
  updateHealthRecord(
    request: HealthRecord,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Message) => void,
  ): ClientUnaryCall;
  deleteHealthRecord(
    request: HealthRecordIdRequest,
    callback: (error: ServiceError | null, response: Message) => void,
  ): ClientUnaryCall;
  deleteHealthRecord(
    request: HealthRecordIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Message) => void,
  ): ClientUnaryCall;
  deleteHealthRecord(
    request: HealthRecordIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Message) => void,
  ): ClientUnaryCall;
  getAthleteHealthRecords(
    request: AthleteFilter,
    callback: (error: ServiceError | null, response: HealthRecordResponse) => void,
  ): ClientUnaryCall;
  getAthleteHealthRecords(
    request: AthleteFilter,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: HealthRecordResponse) => void,
  ): ClientUnaryCall;
  getAthleteHealthRecords(
    request: AthleteFilter,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: HealthRecordResponse) => void,
  ): ClientUnaryCall;
}

export const HealthDataClient = makeGenericClientConstructor(HealthDataService, "HealthData") as unknown as {
  new(address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): HealthDataClient;
  service: typeof HealthDataService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
